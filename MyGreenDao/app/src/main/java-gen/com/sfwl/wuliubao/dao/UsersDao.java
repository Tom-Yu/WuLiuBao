package com.sfwl.wuliubao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sfwl.wuliubao.dao.Users;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USERS".
*/
public class UsersDao extends AbstractDao<Users, Long> {

    public static final String TABLENAME = "USERS";

    /**
     * Properties of entity Users.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property UserNo = new Property(2, String.class, "userNo", false, "USER_NO");
        public final static Property TypeId = new Property(3, Integer.class, "typeId", false, "TYPE_ID");
        public final static Property UserStatu = new Property(4, Integer.class, "userStatu", false, "USER_STATU");
        public final static Property UserName = new Property(5, String.class, "userName", false, "USER_NAME");
        public final static Property UserNick = new Property(6, String.class, "userNick", false, "USER_NICK");
        public final static Property UserSex = new Property(7, String.class, "userSex", false, "USER_SEX");
        public final static Property BirthDate = new Property(8, String.class, "birthDate", false, "BIRTH_DATE");
        public final static Property Amount = new Property(9, Double.class, "amount", false, "AMOUNT");
        public final static Property Integral = new Property(10, Double.class, "integral", false, "INTEGRAL");
        public final static Property UserType = new Property(11, String.class, "userType", false, "USER_TYPE");
        public final static Property UserIcon = new Property(12, String.class, "userIcon", false, "USER_ICON");
        public final static Property Level = new Property(13, Integer.class, "level", false, "LEVEL");
        public final static Property GroupId = new Property(14, Integer.class, "groupId", false, "GROUP_ID");
        public final static Property ClassId = new Property(15, Integer.class, "classId", false, "CLASS_ID");
        public final static Property Region = new Property(16, String.class, "region", false, "REGION");
        public final static Property Addres = new Property(17, String.class, "addres", false, "ADDRES");
        public final static Property PhoneNo = new Property(18, String.class, "phoneNo", false, "PHONE_NO");
        public final static Property MobileNo = new Property(19, String.class, "mobileNo", false, "MOBILE_NO");
        public final static Property EMail = new Property(20, String.class, "eMail", false, "E_MAIL");
        public final static Property LoginTime = new Property(21, String.class, "loginTime", false, "LOGIN_TIME");
        public final static Property LoginIMEI = new Property(22, String.class, "loginIMEI", false, "LOGIN_IMEI");
        public final static Property LoginPhone = new Property(23, String.class, "loginPhone", false, "LOGIN_PHONE");
        public final static Property WxId = new Property(24, String.class, "wxId", false, "WX_ID");
        public final static Property AliPayId = new Property(25, String.class, "aliPayId", false, "ALI_PAY_ID");
        public final static Property DepartMent = new Property(26, String.class, "departMent", false, "DEPART_MENT");
        public final static Property SignLabel = new Property(27, String.class, "signLabel", false, "SIGN_LABEL");
        public final static Property LastLoginDate = new Property(28, String.class, "lastLoginDate", false, "LAST_LOGIN_DATE");
        public final static Property AliPushDeviceId = new Property(29, String.class, "aliPushDeviceId", false, "ALI_PUSH_DEVICE_ID");
        public final static Property LocLon = new Property(30, String.class, "locLon", false, "LOC_LON");
        public final static Property LocLat = new Property(31, String.class, "locLat", false, "LOC_LAT");
        public final static Property LocRegion = new Property(32, String.class, "locRegion", false, "LOC_REGION");
        public final static Property LocTime = new Property(33, String.class, "locTime", false, "LOC_TIME");
        public final static Property Note1 = new Property(34, String.class, "note1", false, "NOTE1");
        public final static Property Note2 = new Property(35, String.class, "note2", false, "NOTE2");
        public final static Property Note3 = new Property(36, String.class, "note3", false, "NOTE3");
        public final static Property Note4 = new Property(37, String.class, "note4", false, "NOTE4");
        public final static Property Note5 = new Property(38, String.class, "note5", false, "NOTE5");
        public final static Property Note6 = new Property(39, String.class, "note6", false, "NOTE6");
        public final static Property Note7 = new Property(40, String.class, "note7", false, "NOTE7");
        public final static Property Note8 = new Property(41, String.class, "note8", false, "NOTE8");
        public final static Property Note9 = new Property(42, String.class, "note9", false, "NOTE9");
    };


    public UsersDao(DaoConfig config) {
        super(config);
    }
    
    public UsersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"USER_NO\" TEXT," + // 2: userNo
                "\"TYPE_ID\" INTEGER," + // 3: typeId
                "\"USER_STATU\" INTEGER," + // 4: userStatu
                "\"USER_NAME\" TEXT," + // 5: userName
                "\"USER_NICK\" TEXT," + // 6: userNick
                "\"USER_SEX\" TEXT," + // 7: userSex
                "\"BIRTH_DATE\" TEXT," + // 8: birthDate
                "\"AMOUNT\" REAL," + // 9: amount
                "\"INTEGRAL\" REAL," + // 10: integral
                "\"USER_TYPE\" TEXT," + // 11: userType
                "\"USER_ICON\" TEXT," + // 12: userIcon
                "\"LEVEL\" INTEGER," + // 13: level
                "\"GROUP_ID\" INTEGER," + // 14: groupId
                "\"CLASS_ID\" INTEGER," + // 15: classId
                "\"REGION\" TEXT," + // 16: region
                "\"ADDRES\" TEXT," + // 17: addres
                "\"PHONE_NO\" TEXT," + // 18: phoneNo
                "\"MOBILE_NO\" TEXT," + // 19: mobileNo
                "\"E_MAIL\" TEXT," + // 20: eMail
                "\"LOGIN_TIME\" TEXT," + // 21: loginTime
                "\"LOGIN_IMEI\" TEXT," + // 22: loginIMEI
                "\"LOGIN_PHONE\" TEXT," + // 23: loginPhone
                "\"WX_ID\" TEXT," + // 24: wxId
                "\"ALI_PAY_ID\" TEXT," + // 25: aliPayId
                "\"DEPART_MENT\" TEXT," + // 26: departMent
                "\"SIGN_LABEL\" TEXT," + // 27: signLabel
                "\"LAST_LOGIN_DATE\" TEXT," + // 28: lastLoginDate
                "\"ALI_PUSH_DEVICE_ID\" TEXT," + // 29: aliPushDeviceId
                "\"LOC_LON\" TEXT," + // 30: locLon
                "\"LOC_LAT\" TEXT," + // 31: locLat
                "\"LOC_REGION\" TEXT," + // 32: locRegion
                "\"LOC_TIME\" TEXT," + // 33: locTime
                "\"NOTE1\" TEXT," + // 34: note1
                "\"NOTE2\" TEXT," + // 35: note2
                "\"NOTE3\" TEXT," + // 36: note3
                "\"NOTE4\" TEXT," + // 37: note4
                "\"NOTE5\" TEXT," + // 38: note5
                "\"NOTE6\" TEXT," + // 39: note6
                "\"NOTE7\" TEXT," + // 40: note7
                "\"NOTE8\" TEXT," + // 41: note8
                "\"NOTE9\" TEXT);"); // 42: note9
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USERS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Users entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(3, userNo);
        }
 
        Integer typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(4, typeId);
        }
 
        Integer userStatu = entity.getUserStatu();
        if (userStatu != null) {
            stmt.bindLong(5, userStatu);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        String userNick = entity.getUserNick();
        if (userNick != null) {
            stmt.bindString(7, userNick);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(8, userSex);
        }
 
        String birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindString(9, birthDate);
        }
 
        Double amount = entity.getAmount();
        if (amount != null) {
            stmt.bindDouble(10, amount);
        }
 
        Double integral = entity.getIntegral();
        if (integral != null) {
            stmt.bindDouble(11, integral);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(12, userType);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(13, userIcon);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(14, level);
        }
 
        Integer groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(15, groupId);
        }
 
        Integer classId = entity.getClassId();
        if (classId != null) {
            stmt.bindLong(16, classId);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(17, region);
        }
 
        String addres = entity.getAddres();
        if (addres != null) {
            stmt.bindString(18, addres);
        }
 
        String phoneNo = entity.getPhoneNo();
        if (phoneNo != null) {
            stmt.bindString(19, phoneNo);
        }
 
        String mobileNo = entity.getMobileNo();
        if (mobileNo != null) {
            stmt.bindString(20, mobileNo);
        }
 
        String eMail = entity.getEMail();
        if (eMail != null) {
            stmt.bindString(21, eMail);
        }
 
        String loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindString(22, loginTime);
        }
 
        String loginIMEI = entity.getLoginIMEI();
        if (loginIMEI != null) {
            stmt.bindString(23, loginIMEI);
        }
 
        String loginPhone = entity.getLoginPhone();
        if (loginPhone != null) {
            stmt.bindString(24, loginPhone);
        }
 
        String wxId = entity.getWxId();
        if (wxId != null) {
            stmt.bindString(25, wxId);
        }
 
        String aliPayId = entity.getAliPayId();
        if (aliPayId != null) {
            stmt.bindString(26, aliPayId);
        }
 
        String departMent = entity.getDepartMent();
        if (departMent != null) {
            stmt.bindString(27, departMent);
        }
 
        String signLabel = entity.getSignLabel();
        if (signLabel != null) {
            stmt.bindString(28, signLabel);
        }
 
        String lastLoginDate = entity.getLastLoginDate();
        if (lastLoginDate != null) {
            stmt.bindString(29, lastLoginDate);
        }
 
        String aliPushDeviceId = entity.getAliPushDeviceId();
        if (aliPushDeviceId != null) {
            stmt.bindString(30, aliPushDeviceId);
        }
 
        String locLon = entity.getLocLon();
        if (locLon != null) {
            stmt.bindString(31, locLon);
        }
 
        String locLat = entity.getLocLat();
        if (locLat != null) {
            stmt.bindString(32, locLat);
        }
 
        String locRegion = entity.getLocRegion();
        if (locRegion != null) {
            stmt.bindString(33, locRegion);
        }
 
        String locTime = entity.getLocTime();
        if (locTime != null) {
            stmt.bindString(34, locTime);
        }
 
        String note1 = entity.getNote1();
        if (note1 != null) {
            stmt.bindString(35, note1);
        }
 
        String note2 = entity.getNote2();
        if (note2 != null) {
            stmt.bindString(36, note2);
        }
 
        String note3 = entity.getNote3();
        if (note3 != null) {
            stmt.bindString(37, note3);
        }
 
        String note4 = entity.getNote4();
        if (note4 != null) {
            stmt.bindString(38, note4);
        }
 
        String note5 = entity.getNote5();
        if (note5 != null) {
            stmt.bindString(39, note5);
        }
 
        String note6 = entity.getNote6();
        if (note6 != null) {
            stmt.bindString(40, note6);
        }
 
        String note7 = entity.getNote7();
        if (note7 != null) {
            stmt.bindString(41, note7);
        }
 
        String note8 = entity.getNote8();
        if (note8 != null) {
            stmt.bindString(42, note8);
        }
 
        String note9 = entity.getNote9();
        if (note9 != null) {
            stmt.bindString(43, note9);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Users readEntity(Cursor cursor, int offset) {
        Users entity = new Users( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userNo
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // typeId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // userStatu
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userNick
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userSex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // birthDate
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // amount
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // integral
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userIcon
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // level
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // groupId
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // classId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // region
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // addres
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // phoneNo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // mobileNo
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // eMail
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // loginTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // loginIMEI
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // loginPhone
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // wxId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // aliPayId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // departMent
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // signLabel
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // lastLoginDate
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // aliPushDeviceId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // locLon
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // locLat
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // locRegion
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // locTime
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // note1
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // note2
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // note3
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // note4
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // note5
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // note6
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // note7
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // note8
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42) // note9
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Users entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTypeId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUserStatu(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserNick(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBirthDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAmount(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setIntegral(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setUserType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserIcon(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLevel(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setGroupId(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setClassId(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setRegion(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAddres(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPhoneNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMobileNo(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setEMail(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setLoginTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setLoginIMEI(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLoginPhone(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setWxId(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setAliPayId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDepartMent(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSignLabel(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setLastLoginDate(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setAliPushDeviceId(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setLocLon(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setLocLat(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setLocRegion(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setLocTime(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setNote1(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setNote2(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setNote3(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setNote4(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setNote5(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setNote6(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setNote7(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setNote8(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setNote9(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Users entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Users entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
