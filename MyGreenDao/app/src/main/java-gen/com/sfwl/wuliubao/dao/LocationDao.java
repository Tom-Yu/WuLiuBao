package com.sfwl.wuliubao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sfwl.wuliubao.dao.Location;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION".
*/
public class LocationDao extends AbstractDao<Location, Long> {

    public static final String TABLENAME = "LOCATION";

    /**
     * Properties of entity Location.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property LocLon = new Property(2, Double.class, "locLon", false, "LOC_LON");
        public final static Property LocLat = new Property(3, Double.class, "locLat", false, "LOC_LAT");
        public final static Property LocRegion = new Property(4, String.class, "locRegion", false, "LOC_REGION");
        public final static Property LocTime = new Property(5, java.util.Date.class, "locTime", false, "LOC_TIME");
        public final static Property SysTime = new Property(6, java.util.Date.class, "sysTime", false, "SYS_TIME");
        public final static Property Sync = new Property(7, Boolean.class, "sync", false, "SYNC");
    };


    public LocationDao(DaoConfig config) {
        super(config);
    }
    
    public LocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"LOC_LON\" REAL," + // 2: locLon
                "\"LOC_LAT\" REAL," + // 3: locLat
                "\"LOC_REGION\" TEXT," + // 4: locRegion
                "\"LOC_TIME\" INTEGER," + // 5: locTime
                "\"SYS_TIME\" INTEGER," + // 6: sysTime
                "\"SYNC\" INTEGER);"); // 7: sync
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Location entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Double locLon = entity.getLocLon();
        if (locLon != null) {
            stmt.bindDouble(3, locLon);
        }
 
        Double locLat = entity.getLocLat();
        if (locLat != null) {
            stmt.bindDouble(4, locLat);
        }
 
        String locRegion = entity.getLocRegion();
        if (locRegion != null) {
            stmt.bindString(5, locRegion);
        }
 
        java.util.Date locTime = entity.getLocTime();
        if (locTime != null) {
            stmt.bindLong(6, locTime.getTime());
        }
 
        java.util.Date sysTime = entity.getSysTime();
        if (sysTime != null) {
            stmt.bindLong(7, sysTime.getTime());
        }
 
        Boolean sync = entity.getSync();
        if (sync != null) {
            stmt.bindLong(8, sync ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Location readEntity(Cursor cursor, int offset) {
        Location entity = new Location( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // locLon
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // locLat
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // locRegion
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // locTime
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // sysTime
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // sync
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Location entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLocLon(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setLocLat(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLocRegion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setSysTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSync(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Location entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Location entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
